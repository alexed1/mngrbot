/**
 * Implements RTM communication with the bot for Slack
 *
 * @module Pmbot
 * @author Alex Edelstein
 * @version 0.1
 */

'use strict';

var util = require('util');
var path = require('path');
var fs = require('fs');
var SQLite = require('sqlite3').verbose();
var Bot = require('slackbots');

/**
 * @constructor
 * Creates an instance of the Slack bot.
 *
 */
var Pmbot = function Constructor(settings) {
  this.settings = settings;
  this.settings.name = this.settings.name || 'mngrbot';
  this.settings.initChannel = this.settings.initChannel || 'manageupbot';
  this.dbPath = settings.dbPath || path.resolve(process.cwd(), 'data', 'database.db');

  this.user = null;
  this.db = null;
};

util.inherits(Pmbot, Bot);

Pmbot.prototype.run = function () {
  Pmbot.super_.call(this, this.settings);

  this.on('start', this._onStart);
  this.on('message', this._onMessage);
  this.on('buttonClicked', this._onButtonClicked)
};

Pmbot.prototype.api = function (method, params) {
  return this._api(method, params);
};

Pmbot.prototype._onStart = function () {
  this._loadBotUser();
  this._connectDb();
  //this._firstRunCheck();
  this._welcomeMessage();
  setTimeout(() => this._showGameMenu(), 500);
};

Pmbot.prototype._onMessage = function (message) {
  /*
  if(message.type === 'channel_joined')
  {
      this._welcomeMessage(message.channel.name);
      return;
  } 
  */

  if (this._isUserMessage(message)) {
    if (this._isChatMessage(message)) {
      if (this._relatedToSoftware(message)) {
        this._generateResponseFromText(message.text, message.channel);
        setTimeout(() => this._showGameMenu(message.channel.name), 500);
      }

      if (message.text.toLowerCase().indexOf('show menu') > -1) {
        this.getChannelById(message.channel).then((channel) => {
          this._showGameMenu(channel.name);
        });
      }
    }
  }
}

Pmbot.prototype._onButtonClicked = function (payload) {
  this._generateResponseFromText(payload.actions[0].value, payload.channel.id);
  setTimeout(() => this._showGameMenu(payload.channel.name), 2000);
}

// Filter through users list to find matching one
Pmbot.prototype._loadBotUser = function () {
  var self = this;
  this.user = this.users.filter(function (user) {
    return user.name === self.name;
  })[0];

  // Connect to the sqlite db
  Pmbot.prototype._connectDb = function () {
    if (!fs.existsSync(this.dbPath)) {
      console.error('Database path ' + '"' + this.dbPath + '" does not exist or is not readable');
      process.exit(1);
    }

    this.db = new SQLite.Database(this.dbPath);
  };

  // Save token to the database
  Pmbot.prototype.saveOAuthToken = function (token, team) {
    this.db.run('INSERT INTO tokens(token, team) VALUES(?, ?)', token, team, function (err, record) {
      if (err) {
        return console.error('DATABASE ERROR', err);
      }
    });
  };

  // See if it's the first run, and if so provide a welcome message
  Pmbot.prototype._firstRunCheck = function () {
    var self = this;
    self.db.get('SELECT val FROM info WHERE name = "lastrun" LIMIT 1', function (err, record) {
      if (err) {
        return console.error('DATABASE ERROR:', err)
      }
      var currentTime = (new Date()).toJSON();

      // this is a first run
      if (!record) {
        self._welcomeMessage();
        return self.db.run('INSERT INTO info(name, val) VALUES("lastrun", ?)', currentTime);
      }

      // updates with new last running time
      self.db.run('UPDATE info SET val = ? WHERE name = "lastrun"', currentTime);
    });
  };

  Pmbot.prototype._welcomeMessage = function (channelName) {
    this.postMessageToChannel(channelName || this.settings.initChannel, "Hi, I'm ManageUpBot, helping you practice your Managing Up skils. To keep your " +
      "Manager operating at peak efficiency, you need to provide them with frequent opportunities to \n 1) Provide Praise, \n 2) Chitchat about Tech and " +
      "\n 3) Grumble about how much harder coding was in the 'old days'. \n Build your neurolinguistic pathways by practicing daily with ManageUpBot!", {
        as_user: true
      });
  };

  Pmbot.prototype._isChatMessage = function (message) {
    return message.type === 'message' && Boolean(message.text);
  };

  Pmbot.prototype._isButtonClick = function (message) {
    return message.type === 'message' && message.subtype === 'message_changed' &&
      message.message.text.match(/^(chitchat|morale|grumble)$/);
  };

  // Kludgy way to detect that we're dealing with a chat channel
  Pmbot.prototype._isChannelConversation = function (message) {

    return typeof message.channel === 'string' &&
      message.channel[0] === 'C';
  };

  // Avoid infinite loops by filtering out messages generated by us
  Pmbot.prototype._isUserMessage = function (message) {
    return message.type === 'message' &&
      message.subtype !== 'message_changed' &&
      message.user !== this.user.id;
  };

  Pmbot.prototype._relatedToSoftware = function (message) {
    return /^(boost|decide|gcr)(\s)*/i.test(message.text);
  };

  Pmbot.prototype._getFirstWord = function (str) {
    if (str.indexOf(' ') === -1)
      return str;
    else
      return str.substr(0, str.indexOf(' '));
  };

  Pmbot.prototype._showGameMenu = function (channelName) {
    var channel = (channelName != null) ? channelName : this.settings.initChannel;
    var buttons = JSON.parse(fs.readFileSync(path.resolve(process.cwd(), 'data', 'falken.json'), 'UTF-8'));
    this.postMessageToChannel(channel, "", {
      as_user: true,
      attachments: [buttons]
    });
  }

  Pmbot.prototype._generateResponseFromText = function (keyphrase, original_channel) {
    var self = this;
    var firstWord = this._getFirstWord(keyphrase).toLowerCase();
    self.db.get("SELECT id, joke FROM jokes WHERE type = '" + firstWord + "' ORDER BY used ASC, RANDOM() LIMIT 1", function (err, record) {
      if (err) {
        return console.error('DATABASE ERROR: ', err);
      }

      var channel = self._getChannelById(original_channel);
      self.postMessageToChannel(channel.name, record.joke, {
        as_user: true
      });
      self.db.run('UPDATE jokes SET used = used + 1 WHERE id = ?', record.id);
    });
  };

  Pmbot.prototype._getChannelById = function (channelId) {
    return this.channels.filter(function (item) {
      return item.id === channelId;
    })[0];
  };
}

module.exports = Pmbot;